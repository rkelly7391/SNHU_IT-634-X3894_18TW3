import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

/**
 * Servlet implementation class RyanFlight Will allow the user to search for a
 * flight
 * 
 * @author ryan.kelly5
 */
@WebServlet(description = "RyanFlightSearches", urlPatterns = { "/FlightSearch" })
public class RyanFlightSearchServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	// create a map to the flight search
	private Map<Integer, RyanFlightSearch> flightSearchDatabase = new LinkedHashMap<>();

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String action = request.getParameter("action");
		if (action == null)
			action = "list";
		switch (action) {
		case "create":
			this.showFlightSearch(response);
			break;
		case "view":
			this.viewTicket(request, response);
			break;
		case "download":
			this.downloadAttachment(request, response);
			break;
		case "list":
		default:
			this.listTickets(response);
			break;
		}
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String action = request.getParameter("action");
		if (action == null)
			action = "list";
		switch (action) {
		case "create":
//			this.createTicket(request, response);
			break;
		case "list":
		default:
			response.sendRedirect("tickets");
			break;
		}
	}

	private void showFlightSearch(HttpServletResponse response) throws ServletException, IOException {
		PrintWriter writer = this.writeHeader(response);

		writer.append("<h2>Search for a Flight</h2>\r\n");
        writer.append("<form method=\"POST\" action=\"search\" ")
              .append(">\r\n");
        writer.append("<input type=\"hidden\" name=\"action\" ")
              .append("value=\"list\"/>\r\n");
        writer.append("Departing from:<br/>\r\n");
        writer.append("<input type=\"text\" list=\"departure\" name=\"departLocationName\"/><br/><br/>\r\n"); //list=\"departure\"
        writer.append("Arriving in:<br/>\r\n");
        writer.append("<input type=\"text\" list=\"destinations\" name=\"arrivalLocationName\"/><br/><br/>\r\n"); // list=\"destinations\" 
        writer.append("Departure Date:<br/>\r\n");
        writer.append("<input type=\"date\" name=\"departureDate\"/><br/><br/>\r\n");
        writer.append("Number of Tickets<br/>\r\n");
        writer.append("<select name=\"numberOfTickets\">");
        	writer.append("<option value=\"1\">1</option>");
        	writer.append("<option value=\"2\">2</option>");
        	writer.append("<option value=\"3\">3</option>");
        	writer.append("<option value=\"4\">4</option>");
        	writer.append("<option value=\"5\">5</option>");
        	writer.append("<option value=\"6\">6</option>");
        	writer.append("<option value=\"7\">7</option>");
        	writer.append("<option value=\"8\">8</option>");
        	writer.append("<option value=\"9\">9</option>");
        	writer.append("<option value=\"10\">10</option>");
        writer.append("</select>");
        writer.append("<br/><br/>\r\n");
        writer.append("<input type=\"submit\" value=\"Submit\"/>\r\n");
        
        //Build these out of the database later
        writer.append("<datalist id=\"departure\">");
        	writer.append("<option value=\"New York\">");
        writer.append("</datalist>");
        
        writer.append("<datalist id=\"destinations\">");
        	writer.append("<option value=\"Paris\">");
        writer.append("</datalist>");
        writer.append("</form>\r\n");
        this.writeFooter(writer);

		this.writeFooter(writer);
	}

	private void viewTicket(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String idString = request.getParameter("ticketId");
		Ticket ticket = this.getTicket(idString, response);
		if (ticket == null)
			return;

		PrintWriter writer = this.writeHeader(response);

		writer.append("<h2>Ticket #").append(idString).append(": ").append(ticket.getSubject()).append("</h2>\r\n");
		writer.append("<i>Customer Name - ").append(ticket.getCustomerName()).append("</i><br/><br/>\r\n");
		writer.append(ticket.getBody()).append("<br/><br/>\r\n");

		if (ticket.getNumberOfAttachments() > 0) {
			writer.append("Attachments: ");
			int i = 0;
			for (Attachment attachment : ticket.getAttachments()) {
				if (i++ > 0)
					writer.append(", ");
				writer.append("<a href=\"tickets?action=download&ticketId=").append(idString).append("&attachment=")
						.append(attachment.getName()).append("\">").append(attachment.getName()).append("</a>");
			}
			writer.append("<br/><br/>\r\n");
		}

		writer.append("<a href=\"tickets\">Return to list tickets</a>\r\n");

		this.writeFooter(writer);
	}

	private void downloadAttachment(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String idString = request.getParameter("ticketId");
		Ticket ticket = this.getTicket(idString, response);
		if (ticket == null)
			return;

		String name = request.getParameter("attachment");
		if (name == null) {
			response.sendRedirect("tickets?action=view&ticketId=" + idString);
			return;
		}

		Attachment attachment = ticket.getAttachment(name);
		if (attachment == null) {
			response.sendRedirect("tickets?action=view&ticketId=" + idString);
			return;
		}

		response.setHeader("Content-Disposition", "attachment; filename=" + attachment.getName());
		response.setContentType("application/octet-stream");

		ServletOutputStream stream = response.getOutputStream();
		stream.write(attachment.getContents());
	}

	private void listTickets(HttpServletResponse response) throws ServletException, IOException {
		PrintWriter writer = this.writeHeader(response);

		writer.append("<h2>Tickets</h2>\r\n");
		writer.append("<a href=\"tickets?action=create\">Create Ticket").append("</a><br/><br/>\r\n");

		if (this.flightSearchDatabase.size() == 0)
			writer.append("<i>There are no tickets in the system.</i>\r\n");
		else {
			for (int id : this.flightSearchDatabase.keySet()) {
				String idString = Integer.toString(id);
				RyanFlightSearch ticket = this.flightSearchDatabase.get(id);
				writer.append("Ticket #").append(idString).append(": <a href=\"tickets?action=view&ticketId=")
						.append(idString).append("\">").append(ticket.getSubject()).append("</a> (customer: ")
						.append(ticket.getCustomerName()).append(")<br/>\r\n");
			}
		}

		this.writeFooter(writer);
	}

	
	

	
	private PrintWriter writeHeader(HttpServletResponse response) throws ServletException, IOException {
		response.setContentType("text/html");
		response.setCharacterEncoding("UTF-8");

		PrintWriter writer = response.getWriter();
		writer.append("<!DOCTYPE html>\r\n").append("<html>\r\n").append("    <head>\r\n")
				.append("        <title>Customer Support</title>\r\n").append("    </head>\r\n")
				.append("    <body>\r\n");

		return writer;
	}

	private void writeFooter(PrintWriter writer) {
		writer.append("    </body>\r\n").append("</html>\r\n");
	}

}
